# picoCTF – First Grep

> Intro challenge demonstrating how to use `grep` to locate a flag inside a file.

---

## Overview

- **Category:** General Skills / Forensics (varies by year)
- **Difficulty:** Very Easy
- **Goal:** Find the hidden flag inside a provided text file using the `grep` command.
- **Flag Format:** `picoCTF{...}`
- **Final Flag Found:**  
  ```
  picoCTF{grep_is_good_to_find_things_5af9d829}
  ```

---

## What You’re Given

You receive (or download) a file—often simply named something like `file`, `data.txt`, or similar. The flag is somewhere inside.  
Your task: efficiently extract it without manually scrolling through the entire file.

---

## Key Tool: `grep`

`grep` searches for lines matching a pattern in files or input streams.

Basic syntax:
```bash
grep [options] 'pattern' filename
```

Common helpful options:
- `-n` : Show line numbers
- `-i` : Case-insensitive search
- `-o` : Output only the matching portion
- `-R` : Recursive (directories)
- `--color=auto` : Highlight matches (if terminal supports)

---

## Step-by-Step Approach

### 1. (Optional) Peek at the File
Good practice to understand size and structure:
```bash
wc -l file        # how many lines?
head file
tail file
less file         # scroll/search manually if desired
```

### 2. Search for a Likely Substring
Most picoCTF flags contain `picoCTF`, so start with:
```bash
grep 'pico' file
```
If that prints a full line with the flag—you’re done.

### 3. Print Only the Flag Itself (Refinement)
If the line has extra noise:
```bash
grep -o 'picoCTF{[^}]*}' file
```
Explanation of the pattern:
- `picoCTF{` : literal prefix
- `[^}]*` : any characters except `}` (greedy until first closing brace)
- `}` : end of the flag

### 4. (If Unsure About Case)
```bash
grep -i 'pico' file
```

### 5. (If You Forgot the Filename or Searching a Directory)
```bash
grep -R 'picoCTF{' .
```

---


## Final Command (Minimal)
```bash
grep 'pico' file
```

If the file contains exactly one flag-like sequence, that line will show:
```
picoCTF{grep_is_good_to_find_things_5af9d829}
```

---

## Extra Tips for Future Challenges

| Situation | Strategy |
|-----------|----------|
| Binary or unknown format file | `strings suspicious.bin | grep -o 'picoCTF{[^}]*}'` |
| Compressed archives | Extract first: `tar -xf`, `unzip`, then `grep -R 'picoCTF{' .` |
| Large logs | Combine with `less` or use `grep -n` for line numbers |
| Multiple matches | `grep -o 'picoCTF{[^}]*}' file | sort | uniq` |

---

## Why This Challenge Matters

You learn:
- How to quickly extract structured tokens (flags)
- Pattern-based searching
- Beginning use of regular expressions
- Avoiding inefficient shell habits

---

## Cheat Sheet Snippets

```bash
# Basic search
grep 'pico' file

# Only the flag
grep -o 'picoCTF{[^}]*}' file

# With line numbers
grep -n 'picoCTF{' file

# Case-insensitive (if needed)
grep -i 'pico' file

# Recursive (directory)
grep -R 'picoCTF{' .

# From binary-ish file
strings file | grep -o 'picoCTF{[^}]*}'
```

---

## Flag

```
picoCTF{grep_is_good_to_find_things_5af9d829}
```

---
